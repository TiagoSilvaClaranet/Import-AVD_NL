/* 

This is a template to create a VM 
Use search and replace to configure it to own settings

Attention!! Search and replace the whole value, so *VM* and not VM!

Base value:
Template value:     *VM*
Example:            IF10

IP Adress
Template value:     *IP*
Example:            10.252.17.5

Resource group
Template value:     *RG*
Example:            rg-spoke-schipper-shared

Subnet
Template value:     *SNET*
Example:            snet-schipper

*/

############################
# Create a password for *VM*
############################
resource "random_password" "*VM*-local-password" {
  length = 16
  special = true
  min_special = 2
  override_special = "*!@#?"
}

############################
# Create a NIC for *VM*
############################
resource "azurerm_network_interface" "*VM*_nic_001" {
  name                = "${var.nlcnumber}-*VM*-nic-001"
  resource_group_name = azurerm_resource_group.*RG*.name
  location            = azurerm_resource_group.*RG*.location

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.*SNET*.id
    private_ip_address_allocation = "Static"
    private_ip_address            = "*IP*"
  }

  tags = merge(local.common_tags,
  {
    Status      = "Production"
    Billable     = "Billable-Dynamic"
    Owner        = "Cloud"
    BackupPolicy = "BackupDaily-90Days"
  })
  
}
####################################
# Create *VM* Virtual Machine
####################################
resource "azurerm_windows_virtual_machine" "*VM*_VM" {
  name                = "${var.nlcnumber}-*VM*"
  computer_name       = "*VM*"
  resource_group_name = azurerm_resource_group.*RG*.name
  location            = azurerm_resource_group.*RG*.location
  size                = "Standard_B2ms"
  admin_username      = "cladmin"
  admin_password      = random_password.*VM*-local-password.result
  network_interface_ids = [
    azurerm_network_interface.*VM*_nic_001.id
  ]

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "MicrosoftWindowsServer"
    offer     = "WindowsServer"
    sku       = "2022-Datacenter"
    version   = "latest"
  }

  identity {
    type         = "SystemAssigned"
  }

  tags = merge(local.common_tags,
  {
    Status       = "Production"
    Billable     = "Billable-Dynamic"
    Owner        = "Cloud"
    BackupPolicy = "BackupDaily-90Days"
  })

}

##########################################################
# Additional Storage
##########################################################

  ############################
  # Create Data Disk 1
  ############################

  # Disk creation 
  resource "azurerm_managed_disk" "*VM*_DataDisk_1" {
  name                 = "${var.nlcnumber}-*VM*-DataDisk_1"
  resource_group_name  = azurerm_resource_group.*RG*.name
  location             = azurerm_resource_group.*RG*.location
  storage_account_type = "Standard_LRS"
  create_option        = "Empty"
  disk_size_gb         = "20"
  
  tags = merge(local.common_tags,
  {
    Status      = "Production"
    Billable     = "Billable-Dynamic"
    Owner        = "Cloud"
    BackupPolicy = "BackupDaily-90Days"
  })

  }

  # Disk assignment
  resource "azurerm_virtual_machine_data_disk_attachment" "*VM*_DataDisk_1" {
    managed_disk_id    = azurerm_managed_disk.*VM*_DataDisk_1.id
    virtual_machine_id = azurerm_windows_virtual_machine.*VM*_VM.id
    lun                = "1"
    caching            = "None"
  }

################################################################
## Run post_script.ps1 on Virtual Machine
################################################################
resource "azurerm_virtual_machine_extension" "post_script_*VM*" {
  name                        = "post_script_*VM*"
  virtual_machine_id          = azurerm_windows_virtual_machine.*VM*_VM.id
  publisher                   = "Microsoft.Compute"
  type                        = "CustomScriptExtension"
  type_handler_version        = "1.10"
  auto_upgrade_minor_version  = true

  protected_settings = <<SETTINGS
  {
     "commandToExecute": "powershell -encodedCommand ${textencodebase64(file("./scripts/post_script.ps1"), "UTF-16LE")}"
  }
  SETTINGS
}

output "*VM*-password" {
  value = random_password.*VM*-local-password.result
  sensitive = true
}