/* 

This is a template to create a SQLVM 
Use search and replace to configure it to own settings

Attention!! Search and replace the whole value, so *VM* and not VM!

Base value:
Template value:     *VM*
Example:            IF10

IP Adress
Template value:     *IP*
Example:            10.252.17.5

Resource group
Template value:     *RG*
Example:            rg-spoke-schipper-shared

Subnet
Template value:     *SNET*
Example:            snet-schipper

*/

############################
# Create a NIC for *VM*
############################

resource "azurerm_network_interface" "*VM*_nic_001" {
  name                = "${var.nlcnumber}-*VM*-nic-001"
  resource_group_name = azurerm_resource_group.*RG*.name
  location            = azurerm_resource_group.*RG*.location

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.*SNET*.id
    private_ip_address_allocation = "Static"
    private_ip_address            = "*IP*"
  }

  tags = merge(local.common_tags,
  {
    Status      = "Production"
    Billable     = "Billable-Dynamic"
    Owner        = "Cloud"
    BackupPolicy = "BackupDaily-90Days"
  })
  
}

##########################################
# Azure Virtual Machine
##########################################

# Generate password
resource "random_password" "*VM*-local-password" {
  length = 16
  special = true
  min_special = 2
  override_special = "*!@#?"
}

# Create Virtual Machine
resource "azurerm_virtual_machine" "*VM*-vm" {
  name                  = "${var.nlcnumber}-*VM*"
  resource_group_name   = azurerm_resource_group.*RG*.name
  location              = azurerm_resource_group.*RG*.location
  network_interface_ids = [azurerm_network_interface.*VM*_nic_001.id]
  vm_size               = "Standard_E4ds_v4"

  storage_image_reference {
    publisher = "MicrosoftSQLServer"
    offer     = "sql2019-ws2022"
    sku       = "standard-gen2"
    version   = "latest"
  }

  storage_os_disk {
    name              = "*VM*-OS-Disk-01"
    caching           = "ReadOnly"
    create_option     = "FromImage"
    managed_disk_type = "Premium_LRS"
  }

  os_profile {
    computer_name  = "*VM*"
    admin_username = "cladmin"
    admin_password = random_password.*VM*-local-password.result
  }

  os_profile_windows_config {
    provision_vm_agent        = true
    enable_automatic_upgrades = true
  }

  tags = merge(local.common_tags,
  {
    Status      = "Production"
    Billable     = "Billable-Dynamic"
    Owner        = "Cloud"
    BackupPolicy = "BackupDaily-90Days"
  })

}

##########################################
# Create and attach storage disks
##########################################

# Data disk creation
resource "azurerm_managed_disk" "*VM*_DataDisk_1" {
    name                    = "${var.nlcnumber}-*VM*-DataDisk-1" 
    resource_group_name     = azurerm_resource_group.*RG*.name
    location                = azurerm_resource_group.*RG*.location
    storage_account_type    = "Premium_LRS"
    zone                    = "1"
    create_option           = "Empty"
    disk_size_gb            = "10"
    tags = merge(local.common_tags,
    {
        Status      = "Production"
        Billable     = "Billable-Dynamic"
        Owner        = "Cloud"
        BackupPolicy = "BackupDaily-90Days"
    })    
}

# Data disk attachment
resource "azurerm_virtual_machine_data_disk_attachment" "*VM*_DataDisk_1_attach" {
    managed_disk_id    = azurerm_managed_disk.*VM*_DataDisk_1.id
    virtual_machine_id = azurerm_virtual_machine.*VM*-vm.id
    lun                = 1
    caching            = "ReadWrite"
}

# Log disk creation
resource "azurerm_managed_disk" "*VM*_LogDisk_1" {
    name                    = "${var.nlcnumber}-*VM*_LogDisk_1" 
    resource_group_name     = azurerm_resource_group.*RG*.name
    location                = azurerm_resource_group.*RG*.location
    storage_account_type    = "Premium_LRS"
    zone                    = "1"
    create_option           = "Empty"
    disk_size_gb            = "10"
    tags = merge(local.common_tags,
    {
        Status      = "Production"
        Billable     = "Billable-Dynamic"
        Owner        = "Cloud"
        BackupPolicy = "BackupDaily-90Days"
    })        
}

# Log disk attachment
resource "azurerm_virtual_machine_data_disk_attachment" "*VM*_LogDisk_1_attach" {
    managed_disk_id    = azurerm_managed_disk.*VM*_LogDisk_1.id
    virtual_machine_id = azurerm_virtual_machine.*VM*-vm.id
    lun                = 2
    caching            = "ReadWrite"
}

# Tempdb disk creation
resource "azurerm_managed_disk" "*VM*_TempdbDisk_1" {
    name                    = "${var.nlcnumber}-*VM*_TempdbDisk_1" 
    resource_group_name     = azurerm_resource_group.*RG*.name
    location                = azurerm_resource_group.*RG*.location
    storage_account_type    = "Premium_LRS"
    zone                    = "1"
    create_option           = "Empty"
    disk_size_gb            = "10"
    tags = merge(local.common_tags,
    {
        Status       = "Production"
        Billable     = "Billable-Dynamic"
        Owner        = "Cloud"
        BackupPolicy = "BackupDaily-90Days"
    })    
}

# Tempdb disk attachment
resource "azurerm_virtual_machine_data_disk_attachment" "*VM*_TempdbDisk_1_attach" {
    managed_disk_id    = azurerm_managed_disk.*VM*_TempdbDisk_1.id
    virtual_machine_id = azurerm_virtual_machine.*VM*-vm.id
    lun                = 3
    caching            = "ReadWrite"
}

##########################################
# Create Azure SQL Virtual Machine
##########################################

# Create SQL Virtual Machines based on initial Azure Virtual Machine and set SQL license
resource "azurerm_mssql_virtual_machine" "*VM*_mssql" {
    virtual_machine_id               = azurerm_virtual_machine.*VM*-vm.id
    sql_license_type                 = "PAYG"
    r_services_enabled               = true
    sql_connectivity_port            = 1433
    sql_connectivity_type            = "PRIVATE"

    storage_configuration {
        disk_type               = "NEW"                         # (Required) The type of disk configuration to apply to the SQL Server. Valid values include NEW, EXTEND, or ADD.
        storage_workload_type   = "OLTP"                        # (Required) The type of storage workload. Valid values include GENERAL, OLTP, or DW.

        # The storage_settings block supports the following:
        data_settings {
            default_file_path = "F:\\Data"     # (Required) The SQL Server default path
            luns = [azurerm_virtual_machine_data_disk_attachment.*VM*_DataDisk_1_attach.lun]
        }

        log_settings {
            default_file_path = "G:\\log"     # (Required) The SQL Server default path
            luns = [azurerm_virtual_machine_data_disk_attachment.*VM*_LogDisk_1_attach.lun]                                 # (Required) A list of Logical Unit Numbers for the disks.
        }

        temp_db_settings {
            default_file_path = "H:\\tempdb"     # (Required) The SQL Server default path
            luns = [azurerm_virtual_machine_data_disk_attachment.*VM*_TempdbDisk_1_attach.lun]                                 # (Required) A list of Logical Unit Numbers for the disks.
        }

    }

}


# Outputs
output "*VM*-password" {
  value = random_password.*VM*-local-password.result
  sensitive = true
}




